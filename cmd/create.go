package cmd

import (
	"context"
	"errors"
	"github.com/arangodb/go-driver"
	"github.com/neunhoef/smart-graph-maker/pkg/client"
	"github.com/neunhoef/smart-graph-maker/pkg/database"
	"github.com/neunhoef/smart-graph-maker/pkg/parser"
	err2 "github.com/pkg/errors"
	"github.com/spf13/cobra"
)

var (
	cmdCreate = &cobra.Command{
		Use:               "create",
		Short:             "Create database",
		PersistentPreRunE: connect,
	}
	cmdDebugScript = &cobra.Command{
		Use:   "debugscript",
		Short: "Create database from files which were generated by the debug script",
		RunE:  debugscript,
	}
	cmdCollection = &cobra.Command{
		Use:   "collection",
		Short: "Create collection with provided number of document and size of each document",
		RunE:  collection,
	}
	_client driver.Client
)

func init() {
	var sizeFilename, countFilename, database, collection string
	var size, count int64
	var numberOfShards int

	cmdRoot.AddCommand(cmdCreate)

	cmdCreate.AddCommand(cmdDebugScript)
	cmdDebugScript.Flags().StringVar(&sizeFilename, "sizefile", "",
		"File which contains size (in bytes) of shards")
	cmdDebugScript.Flags().StringVar(&countFilename, "countfile", "",
		"File which contains number of documents in shards")

	cmdCreate.AddCommand(cmdCollection)
	cmdCollection.Flags().Int64Var(&size, "size", 0, "Size (in bytes) of a collection")
	cmdCollection.Flags().Int64Var(&count, "count", 0, "Number of documents")
	cmdCollection.Flags().IntVar(&numberOfShards, "shards", 1, "Number of shards")
	cmdCollection.Flags().StringVar(&database, "database", "_system",
		"Name of database which should be used")
	cmdCollection.Flags().StringVar(&collection, "collection", "test",
		"Name of collection which should be used")

}

func connect(_ *cobra.Command, _ []string) error {
	var err error

	_client, err = client.NewClient(endpoints, driver.BasicAuthentication("root", ""))
	return err
}

func debugscript(cmd *cobra.Command, _ []string) error {
	sizeFilename, _ := cmd.Flags().GetString("sizefile")
	countFilename, _ := cmd.Flags().GetString("countfile")

	if len(sizeFilename) == 0 {
		return errors.New("file with the size should be provided --sizefile")
	}

	if len(countFilename) == 0 {
		return errors.New("file with the count should be provided --countfile")
	}

	dataFromDebugScript := parser.DatabaseMetaDataFromDebugScript{
		SizeFileName:  sizeFilename,
		CountFileName: countFilename,
	}

	metadata := parser.NewDatabaseMetaData(&dataFromDebugScript)
	if err := metadata.GetData(); err != nil {
		return err
	}

	metadata.Print()
	//metadata.CreateDatabases(context.Background(), _client)

	return nil
}

func collection(cmd *cobra.Command, _ []string) error {
	expectedSize, _ := cmd.Flags().GetInt64("size")
	expectedCount, _ := cmd.Flags().GetInt64("count")
	DBName, _ := cmd.Flags().GetString("database")
	colName, _ := cmd.Flags().GetString("collection")
	shards, _ := cmd.Flags().GetInt("shards")

	if expectedSize == 0 {
		return errors.New("file with the size should be provided --sizefile")
	}

	if expectedCount == 0 {
		return errors.New("file with the count should be provided --countfile")
	}

	DBHandle, err := database.CreateOrGetDatabase(context.Background(), _client, DBName)
	if err != nil {
		return err2.Wrap(err, "can not create/get database")
	}

	options := driver.CreateCollectionOptions{
		NumberOfShards: shards,
	}

	colHandle, err := database.CreateOrGetCollection(context.Background(), DBHandle, colName, &options)
	if err != nil {
		return err2.Wrap(err, "can not create a collection")
	}

	creator := database.NewCollectionCreator(expectedSize, expectedCount, &database.DocumentWithOneField{}, colHandle)
	return creator.CreateDocuments(context.Background())
}
